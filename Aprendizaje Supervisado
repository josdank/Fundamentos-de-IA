{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlckfVvD37Em130NsVMQYe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/josdank/Fundamentos-de-IA/blob/Deberes/Aprendizaje%20Supervisado\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "iUDuepeZISE5",
        "outputId": "455aac52-025b-41b2-cd33-56109cacf60d"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name '__file__' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-3f3c091dcbe5>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# 1. Cargar el dataset con manejo de rutas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mscript_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdirname\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabspath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__file__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mcsv_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscript_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"premier-player-23-24.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name '__file__' is not defined"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "import os\n",
        "\n",
        "# 1. Cargar el dataset con manejo de rutas\n",
        "script_dir = os.path.dirname(os.path.abspath(__file__))\n",
        "csv_path = os.path.join(script_dir, \"premier-player-23-24.csv\")\n",
        "\n",
        "try:\n",
        "    df = pd.read_csv(csv_path, encoding='latin1')\n",
        "except FileNotFoundError:\n",
        "    print(f\"\\nERROR: Archivo no encontrado en: {csv_path}\")\n",
        "    print(\"Archivos disponibles:\", os.listdir(script_dir))\n",
        "    exit()\n",
        "\n",
        "# 2. Filtrar jugadores FW (delanteros)\n",
        "df_fw = df[df[\"Pos\"].str.upper().str.contains(\"FW|FORWARD|FWD\", na=False, regex=True)].copy()\n",
        "\n",
        "if df_fw.empty:\n",
        "    print(\"\\nNo hay jugadores FW. Posiciones disponibles:\", df[\"Pos\"].unique())\n",
        "    exit()\n",
        "\n",
        "# 3. Crear categorías con manejo de duplicados\n",
        "df_fw[\"Total_Contrib\"] = df_fw[\"Gls\"] + df_fw[\"Ast\"]\n",
        "\n",
        "try:\n",
        "    # Intentar con cuantiles\n",
        "    df_fw[\"Categoria\"] = pd.qcut(df_fw[\"Total_Contrib\"],\n",
        "                            q=[0, 0.25, 0.75, 1],\n",
        "                            labels=[\"Malo\", \"Normal\", \"Bueno\"],\n",
        "                            duplicates='drop')\n",
        "except ValueError:\n",
        "    # Si falla, usar rangos fijos\n",
        "    bins = [-1, 5, 15, 100]  # Ajustar según análisis real\n",
        "    df_fw[\"Categoria\"] = pd.cut(df_fw[\"Total_Contrib\"],\n",
        "                            bins=bins,\n",
        "                            labels=[\"Malo\", \"Normal\", \"Bueno\"])\n",
        "\n",
        "# 4. Mostrar distribución\n",
        "print(\"\\nDistribución de categorías:\")\n",
        "print(df_fw[\"Categoria\"].value_counts())\n",
        "\n",
        "# 5. Preparar datos para el modelo\n",
        "X = df_fw[[\"Gls\", \"Ast\"]]\n",
        "y = df_fw[\"Categoria\"]\n",
        "\n",
        "# 6. Dividir y normalizar datos\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# 7. Entrenar y evaluar modelo\n",
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "knn.fit(X_train, y_train)\n",
        "accuracy = knn.score(X_test, y_test)\n",
        "print(f'\\nPrecisión del modelo: {accuracy:.2f}')\n",
        "\n",
        "# 8. Sistema de predicción interactivo\n",
        "print(\"\\nIngresa las estadísticas de un nuevo delantero:\")\n",
        "goles = float(input(\"Goles en la temporada: \"))\n",
        "asistencias = float(input(\"Asistencias en la temporada: \"))\n",
        "\n",
        "nuevo_jugador = scaler.transform([[goles, asistencias]])\n",
        "prediccion = knn.predict(nuevo_jugador)[0]\n",
        "\n",
        "if prediccion == \"Bueno\":\n",
        "    msg = \"Delantero Estrella: Percentil 75+ (G+A > {})\".format(\n",
        "        df_fw[df_fw[\"Categoria\"] == \"Bueno\"][\"Total_Contrib\"].min()\n",
        "    )\n",
        "elif prediccion == \"Normal\":\n",
        "    msg = \"Deltantero Promedio: Entre {} y {} G+A\".format(\n",
        "        df_fw[df_fw[\"Categoria\"] == \"Normal\"][\"Total_Contrib\"].min(),\n",
        "        df_fw[df_fw[\"Categoria\"] == \"Normal\"][\"Total_Contrib\"].max()\n",
        "    )\n",
        "else:\n",
        "    msg = \"Mal Delantero: Menos de {} G+A\".format(\n",
        "        df_fw[df_fw[\"Categoria\"] == \"Malo\"][\"Total_Contrib\"].max()\n",
        "    )\n",
        "\n",
        "print(f\"\\n{msg}\")\n",
        "print(f\"Detalles: {goles} Goles | {asistencias} Asistencias | Total: {goles + asistencias}\")\n"
      ]
    }
  ]
}